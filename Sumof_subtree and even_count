#include <bits/stdc++.h>
typedef long long ll;
const std::string el = "\n";
const std::string yes = "YES";
const std::string no = "NO";
const int MAX = (int)(1e9 + 7);
const int MIN = (int)(-1);
const int DIVISOR = (int)(1e6 + 1);
using namespace std;
const int N=1e3;
vector<int> g[N];
int depth[N];
int height[N];
int even_count[N];
long long subtree_sum[N];
void dfs (int vertex,int par){
/**  Take action on vertex after entering the vertex
 **/
    if(vertex%2==0){
        even_count[vertex]++;
    }
    subtree_sum[vertex]+=vertex;
    for(int child:g[vertex]){
        /**  Take action on child before entering the 
         child node
 **/

        if(child==par) continue;
        depth[child]=depth[vertex]+1;
        dfs(child,vertex);
        height[vertex]=max(height[child]+1, height[vertex]);
        subtree_sum[vertex]+=subtree_sum[child];
        even_count[vertex]+=even_count[child];

        /**  Take action on child after existing  the 
         child node
 **/
    }
    /**  Take action on vertex before existing the 
         vertex
 **/
}




int main() {
        int n;
        cin>>n;
        for(int i=0; i<n-1; i++){
            int x,y;
            cin>>x>>y;
            g[x].push_back(y);
            g[y].push_back(x);
        }
        dfs(1,0);
        // for(int i=1; i<=n; i++){
        //   cout<<depth[i]<<" "<<height[i]<<" "<<endl;;
        // } 
        for(int i=1; i<=n; i++){
            cout<<subtree_sum[i]<<" "<<even_count[i]<<" "<<endl;
        } //cout<<endl;
    return 0;
}

