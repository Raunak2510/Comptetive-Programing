#include<bits/stdc++.h>
#include <algorithm> 
#include <string>
using namespace std;
#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define MOD 1000000007
#define ll long long
#define MOD1 998244353
#define INF 1e18
#define nline "\n"
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ff first
#define ss second
#define PI 3.141592653589793238462
#define set_bits(x) __builtin_popcountll(x)
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()


 int gcd(int a, int b){
          if(a==0){
            return b;

          }
          return gcd(b%a, a);
 }
int mod;
 bool isPrime(int n)
{
   
    if (n <= 1)
        return false;
 
   
    for (int i = 2; i <= n / 2; i++)
        if (n % i == 0)
            return false;
 
    return true;
}
bool sieve_of_eratos(int n){
    bool p[n+1];
    memset(p, true, sizeof(p));
    for(int i=2; i*i<=n; i++){
        if(p[i]==true){
            for(int j=i*i; j<=n; j+=i){
                p[i]=false;
            }
        }
    }
    return p[n];
    // tc -> O(n*log(log(n)))
    // sc -> O(n)
}

void prime_fact_sieve(int n){
    vector<int> spf(n, -1);
    for(int i=2; i<n; i++){
        if(spf[i]==-1){
       for(int j=i; j<n; j+=i){
        if(spf[i]==-1){
            spf[i]=i;
        }
       }
        }
    }
    while(n>1){
        cout<<spf[n]<<" ";
        n/=spf[n];
    }
}

void raunak(){
    int n,q;
    cin>>n>>q;
    int a[n+10];
    for(int i=1; i<=n; i++){
        cin>>a[i];
    }
    int forward[n+10];
    int backward[n+10];
    int gc=0;
    for(int i=1; i<=n; i++){
     forward[i]=gcd(gc, a[i]);
     gc=forward[i];
    }
    gc=0;
    for(int i=n; i>=1; i--){
        backward[i]=gcd(gc, a[i]);
        gc=backward[i];
    }
    while(q--){
        int l,r;
        cin>>l>>r;
        cout<<gcd(forward[l-1], backward[r+1])<<endl;
    }


    }

    
int main(){
   ll t;
   cin>>t;
   while(t--){
       raunak();
   } 
}
