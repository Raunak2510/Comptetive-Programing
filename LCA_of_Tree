#include <bits/stdc++.h>
typedef long long ll;
const std::string el = "\n";
const std::string yes = "YES";
const std::string no = "NO";
const int MAX = (int)(1e9 + 7);
const int MIN = (int)(-1);
const int DIVISOR = (int)(1e6 + 1);
using namespace std;
const int N=1e3;
vector<int> g[N];
int par[N];


void dfs (int vertex,int p=-1){
/**  Take action on vertex after entering the vertex
 **/
    par[vertex]=p;
    for(int child:g[vertex]){
        /**  Take action on child before entering the 
         child node

 **/    

        if(child==p) continue;
       
        dfs(child,vertex);
       
        /**  Take action on child after existing  the 
         child node
 **/
    }
    /**  Take action on vertex before existing the 
         vertex
 **/
}
      vector<int> path(int v){
        vector<int> ans;
        while(v!=-1){
            ans.push_back(v);
            v=par[v];
        }
        reverse(ans.begin(),ans.end());
        return ans;
      }



int main() {
        int n;
        cin>>n;
        for(int i=0; i<n-1; i++){
            int x,y;
            cin>>x>>y;
            g[x].push_back(y);
            g[y].push_back(x);
        }
        dfs(1);
        int x,y;
        cin>>x>>y;
        vector<int> path_x=path(x);
        vector<int> path_y=path(y);
        int lca=-1;
        int min_ln=min(path_y.size(),path_x.size());
        for(int i=0; i<min_ln; i++){
            if(path_y[i]==path_x[i]){
                lca=path_x[i];
            } else{
                break;
            }
        }
        cout<<lca<<endl;
       
// TC -> O(N)
        
    return 0;
}

