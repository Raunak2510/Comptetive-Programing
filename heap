#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int MOD = 998244353;
const int MAX_EXP = 400000;

class heap {
public:
    int arr[100];
    int size;

    heap(){
        arr[0]=-1;
        size=0;
    }

    void insert(int val){
        size++;
        int index=size;
        arr[index]=val;
        while(index>1){
            int parent = index/2;
            if(arr[parent]< arr[index]){
                swap(arr[parent], arr[index]);
                index=parent;
            } else{
                return;
            }
        }
    }

    void print (){
        for(int i=1; i<=size; i++ ){
            cout<<arr[i]<<" ";
        } cout<<endl;
    }

    void deleteFromHeap(){
        if(size==0){
            cout<<"nothing to delete"<<endl;
            return;
        }

        arr[1]=arr[size];
        size--;

        // move root to its correct position
        int i=1;
        while(i<size){
         int leftIndx= 2*i;
         int rightIndx= 2*i+1;
         if(leftIndx<size && arr[i]<arr[leftIndx]){
            swap(arr[i], arr[leftIndx]);
         } else if(rightIndx<size && arr[i]<arr[rightIndx]){
            swap(arr[i], arr[rightIndx]);
         } else{
            return;
         }
        }
    }
};

void heapify(int arr[],int n, int i){
    int largest=i;
    int left=2*i; 
    int right=2*i+1;

    if(left<=n && arr[largest]<arr[left]){
        largest=left;
    }
    if(right<=n && arr[largest]<arr[right]){
        largest=right;
    }

    if(largest!=i){
        swap(arr[largest], arr[i]);
        heapify(arr, n, largest);
    }
}

void heapSort(int arr[], int n){
    int size=n;
    while(size>1){
        swap(arr[size] , arr[1]);
        size--;
        heapify(arr, size, 1);
    }
}

int main() {
    heap h;
    h.insert(50);
    h.insert(55);
    h.insert(53);
    h.insert(52);
    h.insert(54);

    h.print();

    int arr[6]= {-1, 54, 53, 55, 52, 50};
    int n=5;
    for(int i=n/2; i>0; i--){
        heapify(arr, n, i);
    }

    for(int i=1; i<=n; i++){
        cout<<arr[i]<<" ";
    } cout<<endl;

   // heapsort
    heapSort(arr, n);

    //print heap sort
     for(int i=1; i<=n; i++){
        cout<<arr[i]<<" ";
    } cout<<endl;

// priority queue 

    // max heap 
    priority_queue<int> pq;
    pq.push(4);
    pq.push(2);
    pq.push(5);
    pq.push(3);

    // element at top 
    cout<<pq.top()<<endl;
    // remove element from top 
    pq.pop();

    // check it is empty
    if(pq.empty()){
        cout<<"pq is empty"<<endl;
    }

    // min heap 

    priority_queue<int, vector<int> , greater<int> > minheap;

    minheap.push(4);
    minheap.push(2);
    minheap.push(5);
    minheap.push(3);

    // element at top 
    cout<<minheap.top()<<endl;
    // remove element from top 
    minheap.pop();

    // check it is empty
    if(minheap.empty()){
        cout<<"minheap is empty"<<endl;
    }

    return 0;
}
